name: Linting, testing, and coverage

on:
  push:
    branches:
    - 'master'

jobs:
    test:
        name: ${{ matrix.os.name }} ${{ matrix.python-version }}
        runs-on: ${{ matrix.os.runs-on }}
        strategy:
            matrix:
                python-version: [3.6, 3.7, 3.8, 3.9.0-beta.5]
                os:
                    -   name: Linux
                        runs-on: ubuntu-latest
                        python_platform: linux
                    -   name: Windows
                        runs-on: windows-latest
                        python_platform: win32
                    -   name: macOS
                        runs-on: macos-latest
                        python_platform: darwin
        steps:
            -   uses: actions/checkout@v2
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}
                    architecture: x64
            -   name: install_dependencies
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install --upgrade setuptools wheel
                    pip install -r requirements.txt
            -   name: Test with unittest
                run: |
                    python setup.py test
    lint_and_coverage:
        name: Linting and coverage
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.8]
        steps:
            -   uses: actions/checkout@v2
            -   name: Set up Python ${{ matrix.python-version }}
                uses: actions/setup-python@v2
                with:
                    python-version: ${{ matrix.python-version }}
                    architecture: x64
            -   name: install_dependencies
                run: |
                    python -m pip install --upgrade pip
                    python -m pip install --upgrade setuptools wheel
                    pip install -r requirements.txt
            -   name: Lint with flake8
                run: |
                    pip install flake8
                    # stop the build if there are Python syntax errors or undefined names
                    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                    # exit-zero treats all errors as warnings.
                    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=119 --statistics
            -   name: Doc coverage
                run: |
                    pip install interrogate codecov coverage
                    interrogate --generate-badge '.github/doccoverage.svg'
                    sed -i 's/interrogate/doc coverage/g; s/.0%/%/g' .github/doccoverage.svg
                    grep -qF '100%' .github/doccoverage.svg && sed -i 's/370/300/g' .github/doccoverage.svg
                    # Setup git config
                    email_author="$(git log -1 --pretty=format:'%an <%ce>')"
                    author="${email_author% *}"
                    email="${email_author#*<}"; email="${email::-1}"
                    git config --global user.name "$author"
                    git config --global user.email "$email"
                    # Only commit and push if there's a change
                    if git diff --name-only --diff-filter='M' | grep -qF '.github/doccoverage.svg'; then
                        git add .github/doccoverage.svg
                        git commit -m '[.github/doccoverage.svg] Updated coverage'
                        git push origin master
                    fi
            -   name: Test coverage
                run: |
                    coverage run -m unittest discover
                    bash <(curl -s https://codecov.io/bash)
                env:
                    CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
