"""Mocks for cst"""

from cdd.cst_utils import (
    AnnAssignment,
    Assignment,
    ClassDefinitionStart,
    CommentStatement,
    ElifStatement,
    FromStatement,
    FunctionDefinitionStart,
    IfStatement,
    MultiComment,
    PassStatement,
    ReturnStatement,
    UnchangingLine,
)

cstify_cst = (
    CommentStatement(
        line_no_start=0,
        line_no_end=0,
        scope=[],
        value="# Lint as: python2, python3",
    ),
    CommentStatement(
        line_no_start=0,
        line_no_end=2,
        scope=[],
        value="\n\n# Copyright 2022 under CC0",
    ),
    CommentStatement(
        line_no_start=2,
        line_no_end=4,
        scope=[],
        value="\n\n# ==============================================================================",
    ),
    MultiComment(
        is_double_q=True,
        is_docstr=None,
        scope=[],
        line_no_start=4,
        line_no_end=6,
        value='\n\n"""Module docstring goes here"""',
    ),
    FromStatement(
        line_no_start=6,
        line_no_end=10,
        scope=[],
        value="\n\n\n\nfrom operator import add",
    ),
    ClassDefinitionStart(
        line_no_start=10,
        line_no_end=16,
        scope=[],
        value="\n\n\n\n\n\nclass C(object):",
        name="C",
    ),
    MultiComment(
        is_double_q=True,
        is_docstr=None,
        scope=["C"],
        line_no_start=16,
        line_no_end=18,
        value='\n\n    """My cls"""',
    ),
    FunctionDefinitionStart(
        line_no_start=18,
        line_no_end=24,
        scope=["C"],
        value="\n\n\n\n    @staticmethod\n\n    def add1(foo):",
        name="add1",
    ),
    MultiComment(
        is_double_q=True,
        is_docstr=None,
        scope=["C", "add1"],
        line_no_start=24,
        line_no_end=38,
        value='\n\n        """\n\n        :param foo: a foo\n\n        :type foo: ```int```\n\n\n\n        :return: foo + 1\n\n        :rtype: ```int```\n\n        """',
    ),
    FunctionDefinitionStart(
        line_no_start=38,
        line_no_end=44,
        scope=["C", "add1"],
        value="\n\n\n\n        def adder(a: int,\n\n                  b: int) -> int:",
        name="adder",
    ),
    MultiComment(
        is_double_q=True,
        is_docstr=None,
        scope=["C", "add1", "adder"],
        line_no_start=44,
        line_no_end=58,
        value='\n\n            """\n\n            :param a: First arg\n\n\n\n            :param b: Second arg\n\n\n\n            :return: first + second arg\n\n            """',
    ),
    CommentStatement(
        line_no_start=58,
        line_no_end=60,
        scope=["C", "add1", "adder"],
        value="\n\n            # fmt: off",
    ),
    AnnAssignment(
        line_no_start=60,
        line_no_end=66,
        scope=["C", "add1", "adder"],
        value="\n\n            res: \\\n\n                int \\\n\n                = a + b",
    ),
    ReturnStatement(
        line_no_start=66,
        line_no_end=68,
        scope=["C", "add1", "adder"],
        value="\n\n            return res",
    ),
    Assignment(
        line_no_start=68,
        line_no_end=80,
        scope=["C", "add1", "adder"],
        value="\n\n\n\n        r = (\n\n            add(foo, 1)\n\n            or\n\n            adder(foo, 1)\n\n        )",
    ),
    IfStatement(
        line_no_start=80,
        line_no_end=82,
        scope=["C", "add1", "adder"],
        value="\n\n        if r:",
    ),
    PassStatement(
        line_no_start=82,
        line_no_end=84,
        scope=["C", "add1", "adder"],
        value="\n\n            pass",
    ),
    ElifStatement(
        line_no_start=84,
        line_no_end=86,
        scope=["C", "add1", "adder"],
        value="\n\n        elif r:",
    ),
    PassStatement(
        line_no_start=86,
        line_no_end=88,
        scope=["C", "add1", "adder"],
        value="\n\n            pass",
    ),
    UnchangingLine(
        line_no_start=88,
        line_no_end=90,
        scope=["C", "add1", "adder"],
        value="\n\n        else:",
    ),
    PassStatement(
        line_no_start=90,
        line_no_end=92,
        scope=["C", "add1", "adder"],
        value="\n\n            pass",
    ),
    CommentStatement(
        line_no_start=92,
        line_no_end=94,
        scope=["C", "add1", "adder"],
        value="\n\n        # fmt: on",
    ),
    CommentStatement(
        line_no_start=94,
        line_no_end=96,
        scope=["C", "add1", "adder"],
        value="\n\n        # That^ incremented `foo` by 1",
    ),
    ReturnStatement(
        line_no_start=96,
        line_no_end=98,
        scope=["C", "add1", "adder"],
        value="\n\n        return r",
    ),
    CommentStatement(
        line_no_start=98,
        line_no_end=104,
        scope=["C", "add1", "adder"],
        value="\n\n\n\n\n\n# from contextlib import ContextDecorator",
    ),
    CommentStatement(
        line_no_start=104,
        line_no_end=108,
        scope=["C", "add1", "adder"],
        value="\n\n\n\n# with ContextDecorator():",
    ),
    CommentStatement(
        line_no_start=108,
        line_no_end=110,
        scope=["C", "add1", "adder"],
        value="\n\n#    pass",
    ),
    FunctionDefinitionStart(
        line_no_start=110,
        line_no_end=116,
        scope=["C", "add1", "adder"],
        value="\n\n\n\n\n\ndef f():",
        name="f",
    ),
    ReturnStatement(
        line_no_start=116,
        line_no_end=118,
        scope=["C", "add1", "adder", "f"],
        value="\n\n    return 1",
    ),
    UnchangingLine(
        line_no_start=119,
        line_no_end=119,
        scope=["C", "add1", "adder", "f"],
        value="\n",
    ),
)
